type UserProgram @model @auth(rules: [{allow: private}]) {
  id: ID!
  programID: ID! @index(name: "byProgram")
  completionDate: AWSDateTime
  completed: Boolean
  userSessions: [UserSession] @hasMany(indexName: "byUserProgram", fields: ["id"])
  enrolmentDate: AWSDateTime
}

type UserSession @model @auth(rules: [{allow: private}]) {
  id: ID!
  userprogramID: ID! @index(name: "byUserProgram")
  sessionID: ID! @index(name: "bySession")
  userID: ID! @index(name: "byUser")
  booked: Boolean
  complete: Boolean
  datetime: AWSDateTime
  meetingURL: String
}

type Stage @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  description: String
  session: [Session] @hasMany(indexName: "byStage", fields: ["id"])
}

type Program @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  description: String
  sessions: [Session] @hasMany(indexName: "byProgram", fields: ["id"])
  version: String
  userPrograms: [UserProgram] @hasMany(indexName: "byProgram", fields: ["id"])
}

type Session @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  programID: ID! @index(name: "byProgram")
  stageID: ID! @index(name: "byStage")
  name: String
  order: Int
  description: String
  userSessions: [UserSession] @hasMany(indexName: "bySession", fields: ["id"])
  length: AWSDateTime
}

enum AccountType {
  SUPER_ADMIN
  USER
  SUPERVISOR
  THERAPIST
}

type User @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  phone: AWSPhone
  onboarded: Boolean
  userSessions: [UserSession] @hasMany(indexName: "byUser", fields: ["id"])
  screened: Boolean
}
 