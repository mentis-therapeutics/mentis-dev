type Program @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  enrollmentDate: AWSDateTime
  completionDate: AWSDateTime
  complete: Boolean
  userID: ID! @index(name: "byUser")
  sessions: [Session] @hasMany(indexName: "byProgram", fields: ["id"])
  programTemplate: ProgramTemplate @hasOne
}

type Session @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  programID: ID! @index(name: "byProgram")
  datetime: AWSDateTime
  booked: Boolean
  booking: Boolean
  complete: Boolean
  meetingUUID: String
  sessionTemplate: SessionTemplate @hasOne
}

enum SessionType {
  ONE
  GROUP
}

type SessionTemplate @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  description: String
  length: AWSTime
  type: SessionType
  #programtemplateID: ID! @index(name: "byProgramTemplate")
  programTemplate: ProgramTemplate @belongsTo
}

type ProgramTemplate @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  description: String
  version: String
  sessionTemplates: [SessionTemplate] @hasMany
}

enum AccountType {
  SUPER_ADMIN
  USER
  SUPERVISOR
  THERAPIST
}

type User @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  phone: AWSPhone
  onboarded: Boolean
  screened: Boolean
  programs: [Program] @hasMany(indexName: "byUser", fields: ["id"])
}
 